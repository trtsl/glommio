//! The purpose of this module is to provide a vehicle for creating `Future`s
//! that are not `Send` via a closure that is `Send`.  `FutureOnce` can then be
//! used as a trait object in a channel. The design is motivated by allowing
//! generic `Future`s to be sent across the channel without `Box`ing the
//! `Future` that is returned by the closure.  For this reason, `FutureOnce::
//! as_future_once` returns a `&mut dyn Future`, which can then be `poll`ed.  To
//! enfore that the `Future` generated by the closure is not `Send`, the
//! implementation requires that a reference to the `Future` can only be
//! obtained once, and that this reference is provided at the same time that the
//! `Future` is generated by the closure.
use std::{future::Future, pin::Pin};

pub(crate) trait FutureOnce {
    type Output;

    /// Returns a `FutRefMut` to provide access to the contained `Future`
    fn ref_mut_once(&mut self) -> FutRefMut<'_, Self::Output>;
}

impl<T> FutureOnce for T where T: private::FutureOnceImpl {
    type Output = T::Output;

    fn ref_mut_once(&mut self) -> FutRefMut<'_, Self::Output> {
        FutRefMut::new(self.as_dyn())
    }
}

/// A helper that automatically calls `FutureOnceImpl::drop_future` after
/// `FutureOnceImpl::as_future_once` is called.  The helper provides access
/// to the `Pin`ned `Future`.  `FutRefMut` ensures that:
/// 1. `Future`s that are not `Send` cannot be sent to other threads even though
///    the type implementing `FutureOnce` is `Send` (i.e. `FutGen` is `Send` but
///    the `Future` it generates is allowed not to be `Send); note that
///    `FutRefMut` itself is not `Send`.
/// 2. the `Pin`ned `Future` cannot subsequently be moved.
pub(crate) struct FutRefMut<'a, T> {
    fut: &'a mut dyn private::FutureOnceImpl<Output = T>,
}

impl<'a, T> FutRefMut<'a, T> {
    fn new(fut: &'a mut dyn private::FutureOnceImpl<Output = T>) -> Self {
        Self { fut }
    }

    pub(crate) fn pin_fut(&mut self) -> Option<Pin<&mut dyn Future<Output = T>>> {
        self.fut
            .as_future_once()
            .map(|f| unsafe { Pin::new_unchecked(f) })
    }
}

impl<T> Drop for FutRefMut<'_, T> {
    fn drop(&mut self) {
        self.fut.drop_future();
    }
}

mod private {
    use super::Future;

    /// A trait that erases the underlying type for use in [`FutRefMut`].
    ///
    /// # Safety
    ///
    /// This trait is marked `unsafe` because implementations must adhere to the
    /// following:
    /// 1. `as_future_once` may only provide a `Some` once (to enforce `!Send`)
    /// 2. `drop_future` must drop the future and could be called multiple times
    ///
    /// Requiring the `drop_future` in the first place seems somewhat pedantic since
    /// the future can no longer be accessed after the first call to `as_fut_once`.
    /// Nevertheless,the `Pin` guarantee states that an object can't be moved until
    /// dropped, so to uphold that, we should always call `drop_future` after using
    /// `as_future_once` in a pinned context.  Note that `as_future_once` is
    /// safe, though it will typically be used with `unsafe` code.
    pub(crate) unsafe trait FutureOnceImpl {
        type Output;
        /// A helper for `FutureOnce::ref_mut_once`
        fn as_dyn(&mut self) -> &mut dyn FutureOnceImpl<Output = Self::Output>;
        /// Provides a reference to the contained future.  The future is only
        /// available once because `FutureOnce` is allowed to be `Send` even
        /// when the future it holds is not.  Called by
        /// [`FutRefMut::pin_fut`].
        fn as_future_once(&mut self) -> Option<&mut dyn Future<Output = Self::Output>>;
        /// Drops the future.  Called by [`<FutRefMut as Drop>::drop`].
        fn drop_future(&mut self);
    }
}

// Safety: the implementation adheres to the requirements of implementing
// `FutureOnce`
unsafe impl<F, G, T> private::FutureOnceImpl for FutGen<F, G>
where
    F: FnOnce() -> G,
    G: Future<Output = T>,
{
    type Output = T;
    fn as_dyn(&mut self) -> &mut dyn private::FutureOnceImpl<Output = Self::Output> {
        self
    }
    fn as_future_once(&mut self) -> Option<&mut dyn Future<Output = Self::Output>> {
        self.as_fut_once().map(|x| x as _)
    }
    fn drop_future(&mut self) {
        self.drop_future()
    }
}

// Safety: `FutGen` ensures that the future `G` is only used once and the future
// (i.e. the return value of `FutGen::as_future_once` itself is not `Send`.
// Therefore, `G` can only be accessed on the the thread where
// `FutGen::as_fut_once` was called.  Note that the future is created only
// when `FutGen::as_fut_once` is called.
unsafe impl<F, G> Send for FutGen<F, G> where F: Send {}

pub(super) enum FutGen<F, G> {
    FutGen(F),
    Fut(G),
    Empty,
}

impl<F, G> FutGen<F, G>
where
    F: FnOnce() -> G,
    G: Future,
{
    pub(super) fn new(f: F) -> Self {
        Self::FutGen(f)
    }
}

impl<F, G, T> FutGen<F, G>
where
    F: FnOnce() -> G,
    G: Future<Output = T>,
{
    fn as_fut_once(&mut self) -> Option<&mut G> {
        match std::mem::replace(self, Self::Empty) {
            Self::FutGen(f) => {
                let g = f();
                std::mem::swap(self, &mut Self::Fut(g));
                self.unwrap_fut()
            }
            Self::Fut(_) | Self::Empty => None,
        }
    }

    fn unwrap_fut(&mut self) -> Option<&mut G> {
        match self {
            Self::Fut(f) => Some(f),
            _ => None,
        }
    }

    pub(super) fn into_fn(self) -> Option<F> {
        match self {
            Self::FutGen(f) => Some(f),
            _ => None,
        }
    }

    fn drop_future(&mut self) {
        std::mem::swap(self, &mut Self::Empty);
    }
}
